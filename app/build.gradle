plugins {
    id("com.android.application")
    id("org.jetbrains.kotlin.android")
}

/*
    $HOME/.gradle/gradle.properties:
        Sshd4a.properties=$HOME/blah/blah/Sshd4a.properties

    $HOME/blah/blah/Sshd4a.properties:
        sign.storeFile=$HOME/blah/blah/keystore.jks
        sign.storePassword=MyStorePassword
        sign.keyAlias=MyKeyAlias
        sign.keyPassword=MyKeyPassword
 */
final def props = new Properties()
if (project.hasProperty("Sshd4a.properties")) {
    final def file = new File(project.property("Sshd4a.properties"))
    if (file.exists()) {
        props.load(new FileInputStream(file))
    }
}

android {
    namespace = "com.hardbacknutter.sshd"
    compileSdk = rootProject.ext.compileSdkVersion

    // https://developer.android.com/studio/projects/configure-agp-ndk
    ndkVersion '26.1.10909125'

    externalNativeBuild {
        cmake {
            path file('CMakeLists.txt')
            version '3.22.1'
        }
    }

    signingConfigs {
        release {
            storeFile file(props["sign.storeFile"])
            storePassword props["sign.storePassword"]
            keyAlias props["sign.keyAlias"]
            keyPassword props["sign.keyPassword"]
        }
    }

    defaultConfig {
        applicationId = rootProject.ext.applicationId
        versionCode = rootProject.ext.applicationVersionCode
        versionName = rootProject.ext.applicationVersionName

        minSdk = rootProject.ext.minSdkVersion
        targetSdk = rootProject.ext.targetSdkVersion

        externalNativeBuild {
            cmake {
                cFlags '-Wall -O'
                cppFlags ''
            }
        }

        signingConfig(signingConfigs.release)

        testInstrumentationRunner = "androidx.test.runner.AndroidJUnitRunner"

        buildConfigField("int", "NR_OF_LOG_LINES", "50")
    }

    buildTypes {
        // don't use for real builds
        abstractRelease {
            minifyEnabled = true
            shrinkResources = true
            proguardFiles getDefaultProguardFile("proguard-android-optimize.txt"),
                    "proguard-rules.pro"
        }

        release {
            initWith(abstractRelease)
            externalNativeBuild {
                cmake {
                    abiFilters("armeabi-v7a", "arm64-v8a")
                }
            }
        }

        // Only x86_64 for the emulator.
        release_x86_64 {
            initWith(abstractRelease)
            externalNativeBuild {
                cmake {
                    abiFilters("x86_64")
                }
            }
        }

        // Only x86_64 for the emulator.
        debug {
            debuggable = true
            versionNameSuffix = "-debug"
            applicationIdSuffix = ".debug"
            buildConfigField("int", "NR_OF_LOG_LINES", "500")
            externalNativeBuild {
                cmake {
                    abiFilters( /* "armeabi-v7a", "arm64-v8a", */ "x86_64")
                }
            }
        }
    }

    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_11
        targetCompatibility = JavaVersion.VERSION_11

        coreLibraryDesugaringEnabled = true
    }

    kotlinOptions {
        jvmTarget = 11
    }

    buildFeatures {
        buildConfig = true
        viewBinding = true
    }

    testOptions {
        unitTests {
            includeAndroidResources = true
            // Can be enabled to make Log.x work. OR, use Logger.x
            returnDefaultValues = false
            all {
                reports {
                    junitXml.getRequired().set(true)
                    html.getRequired().set(false)
                }
            }
        }
    }

    packagingOptions {
        // This is extremely important.
        // We need the libs available to the C execv() call,
        // which means they MUST be extracted from the apk file.
        jniLibs.useLegacyPackaging = true
    }

    lint {
        // allow command line builds to complete
        abortOnError = false
    }

    applicationVariants.all {
        final variant ->
            variant.outputs.all {
                outputFileName = "${rootProject.name}-${rootProject.ext.applicationVersionName}-${variant.name}.apk"
            }
    }
}

dependencies {
    // https://github.com/google/desugar_jdk_libs
    coreLibraryDesugaring('com.android.tools:desugar_jdk_libs_nio:2.0.4')

    implementation('androidx.activity:activity-ktx:1.8.2')
    implementation('androidx.fragment:fragment-ktx:1.6.2')
    implementation("androidx.appcompat:appcompat:1.6.1")
    implementation("androidx.constraintlayout:constraintlayout:2.1.4")
    implementation("androidx.core:core-ktx:1.12.0")
    implementation('androidx.lifecycle:lifecycle-viewmodel-ktx:2.7.0')
    implementation('androidx.lifecycle:lifecycle-livedata-ktx:2.7.0')
    implementation("androidx.preference:preference-ktx:1.2.1")
    implementation("androidx.transition:transition:1.4.1")
    implementation('com.google.android.material:material:1.11.0')
}
